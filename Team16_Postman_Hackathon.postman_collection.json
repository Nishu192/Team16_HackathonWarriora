{
	"info": {
		"_postman_id": "6e1e7395-8bd2-410c-91bf-afba163a8104",
		"name": "LMS_Postman_Hackathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32173035",
		"_collection_link": "https://solar-firefly-972975.postman.co/workspace/solar-firefly-972975-Workspace~5ef877a4-81e2-4a03-a69e-9e247e206168/collection/33186041-6e1e7395-8bd2-410c-91bf-afba163a8104?action=share&source=collection_link&creator=32173035"
	},
	"item": [
		{
			"name": "LMS_UserLoginModule",
			"item": [
				{
					"name": "user_signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//bearerToken\r",
									"const jsonData = pm.response.json();\r",
									"const token = jsonData.token;\r",
									"pm.collectionVariables.set(\"bearerToken\",token);\r",
									"//Status code validation\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.response.to.have.status(200,401);\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is text/html\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/html');\r",
									"});\r",
									"\r",
									"//Json response Schema validation\r",
									"pm.test(\"validate json response schema\",()=>{\r",
									"    pm.expect(pm.response.text()).to.not.be.json; // Updated to check for non-JSON response\r",
									"});\r",
									"\r",
									"//Header\r",
									"pm.test(\"validate Content-Type in Header\",()=>{\r",
									"pm.response.to.have.header(\"Content-Type\",\"text/html\");\r",
									"})\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"//next Request\r",
									"postman.setNextRequest('addNewProgram');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"{{userName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "TOKEN",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"UserLogin_Module Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_ProgramModule",
			"item": [
				{
					"name": "addNewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Status code validation\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 201) {\r",
									"     pm.response.to.have.status(\"Created\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"      else if (pm.response.code ===400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"      else if (pm.response.code ===401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"//Setting Variables\r",
									"\r",
									"pm.collectionVariables.set(\"ProgramID\",jsonData.programId);\r",
									"pm.collectionVariables.set(\"ProgramName\",jsonData.programName);\r",
									"\r",
									"//Validation of json Field values\r",
									"pm.test(\"json Field values validation in response\"),()=>{\r",
									"\r",
									"     pm.expect(jsonData.programDescription).to.eql(\"{{programDescription}}\");\r",
									"    pm.expect(jsonData.programName).to.eql(\"{{programName}}\");\r",
									"    \r",
									"    pm.expect(jsonData.programStatus).to.eql(\"{{programStatus}}\");\r",
									"      \r",
									"\r",
									"}\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//next Request\r",
									"//postman.setNextRequest('All programs');\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "addNewProgram2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status code validation\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 201) {\r",
									"     pm.response.to.have.status(\"Created\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"      else if (pm.response.code ===400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"      else if (pm.response.code ===401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"//Setting Variables\r",
									"\r",
									"pm.collectionVariables.set(\"ProgramID2\",jsonData.programId);\r",
									"pm.collectionVariables.set(\"ProgramName2\",jsonData.programName);\r",
									"\r",
									"//Validation of json Field values\r",
									"pm.test(\"json Field values validation in response\"),()=>{\r",
									"\r",
									"     pm.expect(jsonData.programDescription).to.eql(\"{{programDescription}}\");\r",
									"    pm.expect(jsonData.programName).to.eql(\"{{programName}}\");\r",
									"     \r",
									"    pm.expect(jsonData.programStatus).to.eql(\"{{programStatus}}\");\r",
									"      \r",
									"\r",
									"}\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//next Request\r",
									"postman.setNextRequest('All programs');\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programName\": \"{{programName3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/saveprogram",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "All programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  () => {\r",
									"  if (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"  }\r",
									"  else if (pm.response.code ===400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code ===404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"      else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");\r",
									"  }\r",
									"});\r",
									"\r",
									"var schema_check = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"programId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"creationTime\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"lastModTime\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"programId\",\r",
									"      \"programName\",\r",
									"      \"programDescription\",\r",
									"      \"programStatus\",\r",
									"      \"creationTime\",\r",
									"      \"lastModTime\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(pm.response.json(), schema_check)).to.be.true;\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  () => {\r",
									"  if (pm.response.code === 404) {\r",
									"    pm.test(\"Validating response body\", () => {\r",
									"      const responseJson = pm.response.json();\r",
									"      pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    });\r",
									"  } else if (pm.response.code === 401) {\r",
									"    pm.test(\"Validating response body\", () => {\r",
									"      const responseJson = pm.response.json();\r",
									"      pm.expect(responseJson.error).to.contain(\"Unauthorized\");\r",
									"    });\r",
									"  }\r",
									"});\r",
									"//next request\r",
									" postman.setNextRequest('all programs with users');\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/allPrograms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "all programs with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code ===400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code ===400) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"var schema_check=\r",
									" {\r",
									"    \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programUsers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"userId\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userComments\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                  \"type\": \"null\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"userId\",\r",
									"                \"userFirstName\",\r",
									"                \"userLastName\",\r",
									"                \"userMiddleName\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userLocation\",\r",
									"                \"userTimeZone\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userEduUg\",\r",
									"                \"userEduPg\",\r",
									"                \"userComments\",\r",
									"                \"userVisaStatus\",\r",
									"                \"userLoginEmail\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"programId\",\r",
									"        \"programName\",\r",
									"        \"programDescription\",\r",
									"        \"programStatus\",\r",
									"        \"programUsers\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//response body validation\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Next request\r",
									" postman.setNextRequest('program ID');\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/allProgramsWithUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"allProgramsWithUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,400])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code ===4000) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									" postman.setNextRequest('update by ProgramID');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programs/{{ProgramID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programs",
								"{{ProgramID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update by ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									"   });\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									" postman.setNextRequest('update by ProgramName');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription1}}\",\r\n   \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{programStatus1}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/putprogram/{{ProgramID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"putprogram",
								"{{ProgramID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update by ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is correct\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.response.to.have.status(200);\r",
									"\r",
									"    }\r",
									"    else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"      else if (pm.response.code === 404) {\r",
									"        pm.response.to.have.status(404);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"var schema_check = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"programId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"programDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"programStatus\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"programId\",\r",
									"        \"programName\",\r",
									"        \"programDescription\",\r",
									"        \"programStatus\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"    ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.creationTime).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastModTime).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body based on status code\", () => {\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Response body is correct\", () => {\r",
									"            // Add specific assertions for successful response body\r",
									"        });\r",
									"    } else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"            pm.response.to.have.status(401);\r",
									"            pm.expect(jsonData.error).to.contain(\"Unauthorized\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"//next request\r",
									" postman.setNextRequest('Post_programBatch');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/program/{{ProgramName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"program",
								"{{ProgramName}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearerToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"Program_Module Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_BatchModule",
			"item": [
				{
					"name": "Post_programBatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"batchDescription_storage\",\"This batch is for API Testing\");\r",
									"pm.variables.set(\"batchNoOfClasses_storage\",\"5\");\r",
									"\r",
									"//pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,401,404])   ;\r",
									"});\r",
									"\r",
									"//status line validation\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 201) {\r",
									"     pm.response.to.have.status(\"Created\");}\r",
									"\r",
									"      else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     \r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchId).to.be.an(\"number\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.programId).to.be.an(\"number\");\r",
									"    });\r",
									"//Setting Variables\r",
									"\r",
									"pm.collectionVariables.set(\"batchID\",jsonData.batchId);\r",
									"//pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.contain(\"401\");\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription_storage}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses_storage}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramID}}\r\n }\r\n\r\n// {\r\n//   \"batchDescription\": \"Phasssesdss1startttt\",\r\n//   \"batchName\": \"fghj67dssrsdstygghbnn\",\r\n//   \"batchNoOfClasses\":\"2147\" ,\r\n//   \"batchStatus\": \"Active\",\r\n//   \"programId\": \"16722\"\r\n//  }\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endPoint_PG}}",
							"host": [
								"{{baseUrl}}{{endPoint_PG}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post_programBatch 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"batchDescription_storage\",\"This batch is for API SDET Testing\");\r",
									"pm.variables.set(\"batchNoOfClasses_storage\",\"7\");\r",
									"\r",
									"//pm.collectionVariables.set(\"user_id_collection\", jsonData.user_id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,401,404])   ;\r",
									"});\r",
									"\r",
									"//status line validation\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 201) {\r",
									"     pm.response.to.have.status(\"Created\");}\r",
									"\r",
									"      else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     \r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchId).to.be.an(\"number\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.programId).to.be.an(\"number\");\r",
									"    });\r",
									"//Setting Variables\r",
									"\r",
									"pm.collectionVariables.set(\"batchID1\",jsonData.batchID);\r",
									"//pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.contain(\"401\");\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription_storage}}\",\r\n  \"batchName\": \"{{batchName11}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses_storage}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramID}}\r\n }\r\n\r\n// {\r\n//   \"batchDescription\": \"Phase1startttt\",\r\n//   \"batchName\": \"fghj67rtybnn\",\r\n//   \"batchNoOfClasses\":2147483646 ,\r\n//   \"batchStatus\": \"Active\",\r\n//   \"programId\": 16467\r\n//  }\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endPoint_PG}}",
							"host": [
								"{{baseUrl}}{{endPoint_PG}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_allBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     var result=tv4.validate(jsonData,schema_check);\r",
									"//     if(!result.valid){\r",
									"//         consol.log(result);\r",
									"//     }\r",
									"//     pm.expect(result.valid).to.be.true;\r",
									"// });\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"if (jsonData[i].batchName !== null) {\r",
									"    pm.expect(jsonData[i].batchName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].batchIde !== null) {\r",
									"     pm.expect(jsonData[i].batchId).to.be.a(\"number\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].batchDescription !== null) {\r",
									"    pm.expect(jsonData[i].batchDescription).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].batchNoOfClasses !== null) {\r",
									"   pm.expect(jsonData[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].batchStatus !== null) {\r",
									"    pm.expect(jsonData[i].batchStatus).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"\r",
									"if (jsonData[i].programName!== null) {\r",
									"    pm.expect(jsonData[i].programName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].programId!== null) {\r",
									"     pm.expect(jsonData[i].programId).to.be.a(\"number\");\r",
									"}\r",
									"            \r",
									"//     pm.expect(jsonData[i].batchId).to.be.a(\"number\");\r",
									"//         pm.expect(jsonData[i].batchName).to.be.a(\"string\");\r",
									"//         pm.expect(jsonData[i].batchDescription).to.be.a(\"string\");\r",
									"//    pm.expect(jsonData[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"//   pm.expect(jsonData[i].batchStatus).to.be.a(\"string\");\r",
									"//    pm.expect(jsonData[i].programId).to.be.a(\"number\");\r",
									"//    pm.expect(jsonData[i].programName).to.be.a(\"string\");\r",
									"        }\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									" postman.setNextRequest('GET_byBatchID');"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endPoint_PG}}",
							"host": [
								"{{baseUrl}}{{endPoint_PG}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_byBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401])   ;\r",
									"});\r",
									"\r",
									"//validation of status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"//Validate the Schema\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"        \r",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
									"        pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"   pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"   pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"   pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"        \r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    else if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"pm.expect(jsonData.success).to.be.oneof([true,false])\r",
									"    pm.expect(jsonData.message).to.contain(\"Batch not found\"); \r",
									"});\r",
									"     ;}\r",
									"     else if (pm.response.code === 400) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"p\r",
									"    pm.expect(jsonData.message).to.contain(\"Bad Request\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"// next request\r",
									"postman.setNextRequest('GET_byBatchName');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchId/{{batchID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								"{{batchID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_byBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"//validation of status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"//Validate the Schema\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     var result=tv4.validate(jsonData,schema_check);\r",
									"//     if(!result.valid){\r",
									"//         consol.log(result);\r",
									"//     }\r",
									"//     pm.expect(result.valid).to.be.true;\r",
									"// });\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"    pm.expect(jsonData[i].batchId).to.be.a(\"number\");\r",
									"        pm.expect(jsonData[i].batchName).to.be.a(\"string\");\r",
									"        pm.expect(jsonData[i].batchDescription).to.be.a(\"string\");\r",
									"   pm.expect(jsonData[i].batchNoOfClasses).to.be.a(\"number\");\r",
									"  pm.expect(jsonData[i].batchStatus).to.be.a(\"string\");\r",
									"   pm.expect(jsonData[i].programId).to.be.a(\"number\");\r",
									"   pm.expect(jsonData[i].programName).to.be.a(\"string\");\r",
									"        }\r",
									"   \r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									" pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"      else if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"//pm.expect(jsonData.success).to.be.oneof([true,false])\r",
									"    pm.expect(jsonData.message).to.contain(\"programBatch with id\" + pm.collectionVariables.get(\"batchName\") + \"not found\"); \r",
									"});\r",
									"     ;}\r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"// next request\r",
									"postman.setNextRequest('GET_byProgramID');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/batchName/{{batchName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"batchName",
								"{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_byProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 401]);\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\", () => {\r",
									"    if\r",
									"        (pm.response.code === 200) {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    }\r",
									"else if (pm.response.code === 400) {\r",
									"        pm.response.to.have.status(\"Bad Request\");\r",
									"    }\r",
									"else if (pm.response.code === 404) {\r",
									"        pm.response.to.have.status(\"Not found\");\r",
									"    }\r",
									"\r",
									"    else if (pm.response.code === 503) {\r",
									"        pm.response.to.have.status(\"Service Unavailable\");\r",
									"    }\r",
									"\r",
									"    else {\r",
									"\r",
									"    }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"//\r",
									"\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    const dataLength = jsonData.length;\r",
									"    for (i = 0; i < dataLength; i++) {\r",
									"        pm.expect(jsonData[i].batchId).to.be.an(\"number\");\r",
									"        pm.expect(jsonData[i].batchName).to.be.a(\"string\");\r",
									"        pm.expect(jsonData[i].batchDescription).to.be.a(\"string\");\r",
									"        pm.expect(jsonData[i].batchNoOfClasses).to.be.an(\"number\");\r",
									"        pm.expect(jsonData[i].batchStatus).to.be.a(\"string\");\r",
									"        pm.expect(jsonData[i].programId).to.be.an(\"number\");\r",
									"        pm.expect(jsonData[i].programName).to.be.a(\"string\");\r",
									"    }\r",
									"\r",
									"});\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\", () => {\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.test(\"Response body is correct\", () => {\r",
									"\r",
									"            // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"            // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"        });\r",
									"\r",
									"        ;\r",
									"    }\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"\r",
									"            pm.response.to.have.status(401);\r",
									"            pm.expect(jsonData.error).to.contain(\"Unauthorized\");\r",
									"        });\r",
									"        ;\r",
									"    }\r",
									"    else if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"\r",
									"            pm.expect(jsonData.success).to.be.oneof([true, false])\r",
									"          \r",
									"            pm.response.to.have.body(\"programBatch with id\"+ pm.collectionVariables.get(\"ProgramID\") +\"not found\");\r",
									"        });\r",
									"        ;\r",
									"    }\r",
									"\r",
									"    else {\r",
									"\r",
									"    }\r",
									"});\r",
									"\r",
									"postman.setNextRequest('PUT_programBatch');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/batches/program/{{ProgramID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"program",
								"{{ProgramID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_programBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]}\r",
									"\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//Validation of json Field values\r",
									"pm.test(\"json Field values validation in response\"),()=>{\r",
									"\r",
									"     pm.expect(jsonData.batchDescription).to.eql(\"{{batchDescription1}}\");\r",
									"    pm.expect(jsonData.batchName).to.eql(\"{{batchName1}}\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.eql(\"{{batchNoOfClasses1}}\");\r",
									"    pm.expect(jsonData.batchStatus).to.eql(\"{{batchStatus}}\");\r",
									"      \r",
									"\r",
									"}\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"postman.setNextRequest('create User');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\r\n        \"batchName\": \"{{batchName1}}\",\r\n        \"batchDescription\": \"{{batchDescription1}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses1}}\",\r\n        \"programId\":\"{{ProgramID}}\",\r\n        \"programName\": \"{{ProgramName}}\",\r\n         \"batchId\": {{batchID}}\r\n\r\n\r\n    }\r\n\r\n//     {\r\n//   \"programDescription\": \"shd 56\",\r\n//    \"programName\": \"trojn\",\r\n//   \"programStatus\": \"active\"\r\n// }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchID}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "TOKEN",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"Batch_Module Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_UserModule",
			"item": [
				{
					"name": "create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Json response Schema validation\r",
									"const schema = {\r",
									"  //\"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									";\r",
									"pm.test(\"validate json response schema\",()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"//setting variable\r",
									"const jsonData = pm.response.json();\r",
									"const user_Id = jsonData.userId;\r",
									"pm.collectionVariables.set(\"userId\",user_Id);\r",
									"\r",
									"// Validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,401,400])   ;\r",
									"});\r",
									"\r",
									"//status line validation\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 201) {\r",
									"     pm.response.to.have.status(\"Created\");}\r",
									"\r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Header\r",
									"pm.test(\"validate Content-Type in Header\",()=>{\r",
									"pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"})\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"//console.log(\"\")\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"     else if (pm.response.code === 400) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.contain(\"Bad Request\"); \r",
									"});\r",
									";}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"Numpyninja@1\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get userRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"roleId\",\r",
									"        \"roleName\",\r",
									"        \"roleDesc\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creationTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastModTime\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"roleId\",\r",
									"        \"roleName\",\r",
									"        \"roleDesc\",\r",
									"        \"creationTime\",\r",
									"        \"lastModTime\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"if (jsonData[i].roleId !== null) {\r",
									"    pm.expect(jsonData[i].roleId).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].roleName !== null) {\r",
									"     pm.expect(jsonData[i].roleName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].roleDesc !== null) {\r",
									"    pm.expect(jsonData[i].roleDesc).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].creationTime !== null) {\r",
									"   pm.expect(jsonData[i].creationTime).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].lastModTime !== null) {\r",
									"    pm.expect(jsonData[i].lastModTime).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"            \r",
									"   }\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									"// postman.setNextRequest('GET_byBatchID');\r",
									"\r",
									"// pm.test(\"validate Server name in Header\",()=>{\r",
									"// pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAll_Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"if (jsonData[i].userId !== null) {\r",
									"    pm.expect(jsonData[i].userId).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userFirstName!== null) {\r",
									"     pm.expect(jsonData[i].userFirstName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLastName !== null) {\r",
									"    pm.expect(jsonData[i].userLastName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userPhoneNumber !== null) {\r",
									"   pm.expect(jsonData[i].userPhoneNumber).to.be.a(\"number\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLocation !== null) {\r",
									"    pm.expect(jsonData[i].userLocation).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"\r",
									"if (jsonData[i].userTimeZone!== null) {\r",
									"    pm.expect(jsonData[i].userTimeZone).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLinkedinUrl!== null) {\r",
									"     pm.expect(jsonData[i].userLinkedinUrl).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userEduUg!== null) {\r",
									"     pm.expect(jsonData[i].userEduUg).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userEduPg!== null) {\r",
									"     pm.expect(jsonData[i].userEduPg).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userVisaStatus!== null) {\r",
									"     pm.expect(jsonData[i].userVisaStatus).to.be.a(\"string\");\r",
									"}\r",
									"if (jsonData[i].userLoginEmail!== null) {\r",
									"     pm.expect(jsonData[i].userLoginEmail).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"   }\r",
									"   \r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user info by UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401])   ;\r",
									"});\r",
									"\r",
									"//validation of status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"//schema\r",
									"const schema ={\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userRoleStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"userRoleStatus\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"user\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"validate json response schema\",()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    else if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"pm.expect(jsonData.success).to.be.oneof([true,false])\r",
									"    pm.expect(jsonData.message).to.contain(\"User not found\"); \r",
									"});\r",
									"     ;}\r",
									"     else if (pm.response.code === 400) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"p\r",
									"    pm.expect(jsonData.message).to.contain(\"Bad Request\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"var  schema = {\r",
									"  //\"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//Validation of json Field values\r",
									"// pm.test(\"Test data type of the response\",() =>{\r",
									"//        pm.expect(jsonData).to.be.an(\"object\");\r",
									"// }\r",
									"//\r",
									"\r",
									"\r",
									"   \r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{UpdatedVisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GerAll_active Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hibernateLazyInitializer\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"hibernateLazyInitializer\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"if (jsonData[i].userId !== null) {\r",
									"    pm.expect(jsonData[i].userId).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userFirstName!== null) {\r",
									"     pm.expect(jsonData[i].userFirstName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLastName !== null) {\r",
									"    pm.expect(jsonData[i].userLastName).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userPhoneNumber !== null) {\r",
									"   pm.expect(jsonData[i].userPhoneNumber).to.be.a(\"number\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLocation !== null) {\r",
									"    pm.expect(jsonData[i].userLocation).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"\r",
									"if (jsonData[i].userTimeZone!== null) {\r",
									"    pm.expect(jsonData[i].userTimeZone).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userLinkedinUrl!== null) {\r",
									"     pm.expect(jsonData[i].userLinkedinUrl).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userEduUg!== null) {\r",
									"     pm.expect(jsonData[i].userEduUg).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userEduPg!== null) {\r",
									"     pm.expect(jsonData[i].userEduPg).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"if (jsonData[i].userVisaStatus!== null) {\r",
									"     pm.expect(jsonData[i].userVisaStatus).to.be.a(\"string\");\r",
									"}\r",
									"\r",
									"\r",
									"if (jsonData[i].userComments!== null) {\r",
									"    pm.expect(jsonData[i].userComments).to.be.a(\"string\");\r",
									"}\r",
									"if (jsonData[i].hibernateLazyInitializer!== null) {\r",
									"     pm.expect(jsonData[i].hibernateLazyInitializer).to.be.a(\"object\");\r",
									"}\r",
									"\r",
									"   }\r",
									"   \r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/activeUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All active and inactive Users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//schema\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"status\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"pm.test(\"validate json response schema\",()=>{\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									" \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{statusRoles}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{statusRoles}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign user by program Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"var schema_check=\r",
									"  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userId\",\r",
									"    \"userFirstName\",\r",
									"    \"userLastName\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userLocation\",\r",
									"    \"userTimeZone\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userEduUg\",\r",
									"    \"userEduPg\",\r",
									"    \"userComments\",\r",
									"    \"userVisaStatus\",\r",
									"    \"userLoginEmail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"//  Schema Validation \r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"     pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.programId).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"programId\": 16963,\r\n  \"roleId\": \"R03\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 8859,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleProgramBatchStatus/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleProgramBatchStatus",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by BatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401])   ;\r",
									"});\r",
									"\r",
									"//validation of status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"\r",
									"//Validate the Schema\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"   \r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"  pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    else if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"\r",
									"pm.expect(jsonData.success).to.be.oneof([true,false])\r",
									"\r",
									"    pm.expect(jsonData.message).to.contain(\"batchid \"+ pm.collectionVariables.get(\"batchID\") + \" not found\"); \r",
									"});\r",
									"     ;}\r",
									"     else if (pm.response.code === 400) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"p\r",
									"    pm.expect(jsonData.error).to.contain(\"Bad Request\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"// next request\r",
									"//postman.setNextRequest('GET_byBatchName');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programBatch/{{batchID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programBatch",
								"{{batchID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code ===404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"   \r",
									"\r",
									"   // {\"message\":\"No Users found for the given program ID: 16225\"}\r",
									"    pm.expect(responseJson.message).to.contain(\"No Users found for the given program ID: \"+ pm.collectionVariables.get(\"ProgramID\") ); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									" //postman.setNextRequest('update by ProgramID');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/programs/{{ProgramID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"programs",
								"{{ProgramID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAll_users along with Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code ===404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userRoleId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"user\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userMiddleName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userComments\",\r",
									"            \"userVisaStatus\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"role\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleDesc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"creationTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"lastModTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"roleName\",\r",
									"            \"roleDesc\",\r",
									"            \"creationTime\",\r",
									"            \"lastModTime\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"userRoleStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userRoleId\",\r",
									"        \"user\",\r",
									"        \"role\",\r",
									"        \"userRoleStatus\",\r",
									"        \"userId\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userRoleId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"user\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userMiddleName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userComments\",\r",
									"            \"userVisaStatus\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"role\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"roleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"roleDesc\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"creationTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"lastModTime\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hibernateLazyInitializer\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"roleId\",\r",
									"            \"roleName\",\r",
									"            \"roleDesc\",\r",
									"            \"creationTime\",\r",
									"            \"lastModTime\",\r",
									"            \"hibernateLazyInitializer\"\r",
									"          ]\r",
									"        },\r",
									"        \"userRoleStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userRoleId\",\r",
									"        \"user\",\r",
									"        \"role\",\r",
									"        \"userRoleStatus\",\r",
									"        \"userId\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"   \r",
									"pm.expect(jsonData.success).to.be.oneof([true,false])\r",
									"   // {\"message\":\"No Users found for the given program ID: 16225\"}\r",
									"    /m.expect(responseJson.message).to.contain(\"No Users found for the given program ID: \"+ pm.collectionVariables.get(\"ProgramID\") ); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by RoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//pm.collectionVariables.set(\"TOKEN\",pm.response.json().token);\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code ===404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"var schema_check=\r",
									"\r",
									"{\r",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userFirstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userMiddleName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userPhoneNumber\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userLocation\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userTimeZone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLinkedinUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduUg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userEduPg\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userVisaStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"userLoginEmail\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"userFirstName\",\r",
									"        \"userLastName\",\r",
									"        \"userMiddleName\",\r",
									"        \"userPhoneNumber\",\r",
									"        \"userLocation\",\r",
									"        \"userTimeZone\",\r",
									"        \"userLinkedinUrl\",\r",
									"        \"userEduUg\",\r",
									"        \"userEduPg\",\r",
									"        \"userComments\",\r",
									"        \"userVisaStatus\",\r",
									"        \"userLoginEmail\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"   \r",
									"\r",
									"   // {\"message\":\"No Users found for the given program ID: 16225\"}\r",
									"    pm.expect(responseJson.message).to.contain(\"No Users found for the given program ID: \"+ pm.collectionVariables.get(\"ProgramID\") ); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"//next request\r",
									" //postman.setNextRequest('update by ProgramID');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/roles/:roleId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roles",
								":roleId"
							],
							"variable": [
								{
									"key": "roleId",
									"value": "R01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users by facets or filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"users\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLoginEmail\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userVisaStatus\",\r",
									"            \"userLoginEmail\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLoginEmail\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userVisaStatus\",\r",
									"            \"userLoginEmail\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"users\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"\r",
									"//     pm.test(\"Test data type of the response\",() =>{\r",
									"//        pm.expect(jsonData).to.be.an(\"array\");\r",
									"//        const dataLength = jsonData.length;\r",
									"// for(i=0;i<dataLength;i++)\r",
									"//         {\r",
									"// if (jsonData[i].userId !== null) {\r",
									"//     pm.expect(jsonData[i].userId).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userFirstName!== null) {\r",
									"//      pm.expect(jsonData[i].userFirstName).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userLastName !== null) {\r",
									"//     pm.expect(jsonData[i].userLastName).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userPhoneNumber !== null) {\r",
									"//    pm.expect(jsonData[i].userPhoneNumber).to.be.a(\"number\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userLocation !== null) {\r",
									"//     pm.expect(jsonData[i].userLocation).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"\r",
									"// if (jsonData[i].userTimeZone!== null) {\r",
									"//     pm.expect(jsonData[i].userTimeZone).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userLinkedinUrl!== null) {\r",
									"//      pm.expect(jsonData[i].userLinkedinUrl).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userEduUg!== null) {\r",
									"//      pm.expect(jsonData[i].userEduUg).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userEduPg!== null) {\r",
									"//      pm.expect(jsonData[i].userEduPg).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"// if (jsonData[i].userVisaStatus!== null) {\r",
									"//      pm.expect(jsonData[i].userVisaStatus).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"\r",
									"// if (jsonData[i].userLoginEmail!== null) {\r",
									"//     pm.expect(jsonData[i].userLoginEmail).to.be.a(\"string\");\r",
									"// }\r",
									"\r",
									"\r",
									"//    }\r",
									"   \r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 404) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.contain(\"404 NOT_FOUND\");\r",
									"    //pm.expect(responseJson.message).to.contain(\"User not found with id\"); \r",
									"})\r",
									"     ;}\r",
									"     else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v2/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by Role Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"//var schema_check=\r",
									"  \r",
									"  \r",
									"\r",
									"//  Schema Validation \r",
									"\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"// });\r",
									"\r",
									"\r",
									"//Validation of json Field values\r",
									"pm.test(\"json Field values validation in response\"),()=>{\r",
									"\r",
									"     pm.expect(jsonData.batchDescription).to.eql(\"{{batchDescription1}}\");\r",
									"    pm.expect(jsonData.batchName).to.eql(\"{{batchName1}}\");\r",
									"     pm.expect(jsonData.batchNoOfClasses).to.eql(\"{{batchNoOfClasses1}}\");\r",
									"    pm.expect(jsonData.batchStatus).to.eql(\"{{batchStatus1}}\");\r",
									"      \r",
									"\r",
									"}\r",
									"//\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roleId\": \"{{UpdatedroleId}}\",\r\n  \"userRoleStatus\": \"{{UpdateduserRoleStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by Role ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"// var schema_check=\r",
									"  \r",
									"  \r",
									"\r",
									"// //  Schema Validation \r",
									"\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"// });\r",
									"\r",
									"\r",
									"//Validation of json Field values\r",
									"\r",
									"\r",
									"\r",
									"//Validation of Field values\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userRoleList\": [\r\n    \"String\"\r\n    ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/roleStatus/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"roleStatus",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by LoginEmail and Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validation of status code\r",
									"pm.test(\"Validation Of Status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([201,400,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema(Response body)\r",
									"\r",
									"// var schema_check=\r",
									"  \r",
									"  \r",
									"\r",
									"// //  Schema Validation \r",
									"\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"// });\r",
									"\r",
									"\r",
									"//Validation of json Field values\r",
									"// pm.test(\"json Field values validation in response\"),()=>{\r",
									"\r",
									"//      pm.expect(jsonData.batchDescription).to.eql(\"{{batchDescription1}}\");\r",
									"//     pm.expect(jsonData.batchName).to.eql(\"{{batchName1}}\");\r",
									"//      pm.expect(jsonData.batchNoOfClasses).to.eql(\"{{batchNoOfClasses1}}\");\r",
									"//     pm.expect(jsonData.batchStatus).to.eql(\"{{batchStatus1}}\");\r",
									"      \r",
									"\r",
									"// }\r",
									"//\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    // pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"     pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loginStatus\": \"string\",\r\n  \"password\": \"string\",\r\n  \"roleIds\": [\r\n    \"string\"\r\n  ],\r\n  \"status\": \"string\",\r\n  \"userLoginEmail\": \"string\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/userLogin/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"userLogin",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "TOKEN",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"User_Module Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_UserRoleMapModule",
			"item": [
				{
					"name": "Get_Assigned Program/Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation of status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,401,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userRoleProgramBatchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"roleId\",\r",
									"        \"programId\",\r",
									"        \"batchId\",\r",
									"        \"userRoleProgramBatchStatus\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"roleId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userRoleProgramBatchStatus\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"roleId\",\r",
									"        \"programId\",\r",
									"        \"batchId\",\r",
									"        \"userRoleProgramBatchStatus\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"array\");\r",
									"       const dataLength = jsonData.length;\r",
									"for(i=0;i<dataLength;i++)\r",
									"        {\r",
									"    pm.expect(jsonData[i].programId).to.be.a(\"number\");\r",
									"        pm.expect(jsonData[i].userId).to.be.a(\"string\");\r",
									"        pm.expect(jsonData[i].userRoleProgramBatchStatus).to.be.a(\"string\");\r",
									"   pm.expect(jsonData[i].batchId).to.be.a(\"number\");\r",
									"  pm.expect(jsonData[i].roleId).to.be.a(\"string\");\r",
									"  \r",
									"        }\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"   // pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    //pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_ByuserID_AssignedProgram/Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validation of status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404,401])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     \r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response\r",
									"\r",
									"const jsonData=pm.response.json();\r",
									"//Validate the Schema\r",
									"\r",
									"var schema_check=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"// pm.test(\"Schema is valid\",()=>{\r",
									"//     var result=tv4.validate(jsonData,schema_check);\r",
									"//     if(!result.valid){\r",
									"//         consol.log(result);\r",
									"//     }\r",
									"//     pm.expect(result.valid).to.be.true;\r",
									"// });\r",
									"\r",
									"pm.test(\"Schema is valid\",()=>{\r",
									"    pm.expect(tv4.validate(jsonData,schema_check)).to.be.true;\r",
									"});\r",
									"\r",
									"//validation of Data Type\r",
									"//\r",
									"\r",
									"\r",
									"    pm.test(\"Test data type of the response\",() =>{\r",
									"       pm.expect(jsonData).to.be.an(\"object\");\r",
									"        \r",
									"    pm.expect(jsonData.batchId).to.be.an(\"number\");\r",
									"        pm.expect(jsonData.batchName).to.be.a(\"string\");\r",
									"        pm.expect(jsonData.batchDescription).to.be.a(\"string\");\r",
									"   pm.expect(jsonData.batchNoOfClasses).to.be.an(\"number\");\r",
									"  pm.expect(jsonData.batchStatus).to.be.a(\"string\");\r",
									"   pm.expect(jsonData.programId).to.be.an(\"number\");\r",
									"   pm.expect(jsonData.programName).to.be.a(\"string\");\r",
									"        \r",
									"   \r",
									"});\r",
									"\r",
									"//validation of response body\r",
									"\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"    pm.test(\"Response body is correct\", () => {\r",
									" \r",
									"    pm.expect(jsonData.status).to.equal(\"Active\");\r",
									"    pm.expect(jsonData.type).to.equal(\"Bearer\");\r",
									"});\r",
									"  \r",
									"   ;}\r",
									"    else if (pm.response.code === 401) {\r",
									"        pm.test(\"Validating response body\", () => {\r",
									" \r",
									"   \r",
									"    pm.expect(jsonData.error).to.contain(\"Unauthorized\"); \r",
									"});\r",
									"     ;}\r",
									"    \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"UserRoleMap_Module Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_DeleteAll",
			"item": [
				{
					"name": "Delete by ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code Validation\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"      else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/plain;charset=UTF-8');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Validation of response body\", function () {\r",
									"    pm.response.to.have.body(\"Message: Program Id-\"+ pm.collectionVariables.get(\"ProgramID\") +\" is deleted Successfully!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deletebyprogid/{{ProgramID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deletebyprogid",
								"{{ProgramID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "By ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code Validation\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"      else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Validation of response body\", function () {\r",
									"    pm.response.to.have.body(\"MMessage: Program Name -\"+ pm.collectionVariables.get(\"ProgramName2\") +\" is deleted Successfully!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deletebyprogname/{{ProgramName2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deletebyprogname",
								"{{ProgramName2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_byBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code Validation\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"      else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"// Response validation\r",
									"\r",
									"pm.test(\"Validation of response body\", function () {\r",
									"    pm.response.to.have.body(\"Message: Batch with Id-\"+ pm.collectionVariables.get(\"batchID\") +\" deleted Successfully!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/batches/{{batchID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batches",
								"{{batchID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_allProgram/BatchByUserId",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/userRoleProgramBatchMap/deleteAll/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete _byUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code Validation\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,400,401,404])   ;\r",
									"});\r",
									"\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"     else if (pm.response.code === 404) {\r",
									"     pm.response.to.have.status(\"Not Found\");}\r",
									"      else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"     \r",
									"     else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"//Header\r",
									"pm.test(\"validate Content-Type in Header\",()=>{\r",
									"pm.response.to.have.header(\"Content-Type\",\"text/plain;charset=UTF-8\");\r",
									"})\r",
									"pm.test(\"validate Server name in Header\",()=>{\r",
									"pm.response.to.have.header(\"Server\",\"Cowboy\");\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Check if user was deleted\", () => {\r",
									"   \r",
									"    pm.expect(pm.response.text()).to.include(\"Deleted User ID:  \" + pm.collectionVariables.get(\"userId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"DeleteAll Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LMS_UserLogout",
			"item": [
				{
					"name": "userLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validation of status code\r",
									"pm.test(\"Validation of status code\", function () {\r",
									" pm.expect(pm.response.code).to.be.oneOf([200,404])   ;\r",
									"});\r",
									"\r",
									"//Validation of Status line\r",
									"pm.test(\" Status line is present\",  ()=> {\r",
									"  if \r",
									"    (pm.response.code === 200) {\r",
									"     pm.response.to.have.status(\"OK\");}\r",
									"\r",
									"     else if (pm.response.code === 400) {\r",
									"     pm.response.to.have.status(\"Bad Request\");}\r",
									"\r",
									"     else if (pm.response.code === 401) {\r",
									"     pm.response.to.have.status(\"Unauthorized\");}\r",
									"     \r",
									"     \r",
									"         else if (pm.response.code === 503) {\r",
									"     pm.response.to.have.status(\"Service Unavailable\");}\r",
									"     \r",
									"   else {\r",
									"  \r",
									"  }\r",
									"});\r",
									"\r",
									"//Validate time response\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//Validate the header is present or not\r",
									"pm.test(\"Content-Type header is present\",() =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate the header value\r",
									"pm.test(\"Content-Type header value is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/plain;charset=UTF-8');\r",
									"});\r",
									"\r",
									"//Test if a cookie is present in the response\r",
									"pm.test(\"Cookie  is not  present\",()=> {\r",
									"     pm.expect(pm.cookies.has(\"cookie_name\")).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"//validation of response body\r",
									"pm.test(\"successfully status and message appears in body response\",  ()=> {\r",
									"  if (pm.response.code === 200) {\r",
									"     pm.response.to.have.body(\"Logout successful\")\r",
									"     ;}\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/logoutlms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"UserLogout Test\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"Team16 LMS API Testing\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "batchDescription_Collection",
			"value": ""
		},
		{
			"key": "endPoint_PG",
			"value": "/batches"
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "sdetorganizers@gmail.com"
		},
		{
			"key": "ProgramID",
			"value": ""
		},
		{
			"key": "ProgramName",
			"value": ""
		},
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "statusRoles",
			"value": "byStatus?Id=all/R01/R02/R03"
		},
		{
			"key": "ProgramID2",
			"value": ""
		},
		{
			"key": "ProgramName2",
			"value": ""
		},
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "batchID",
			"value": ""
		},
		{
			"key": "batchID1",
			"value": ""
		}
	]
}